version: '3.8'

services:
  # PostgreSQL Database (Production)
  db:
    image: postgres:15-alpine
    container_name: storify-db-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: storify_prod
      POSTGRES_USER: ${DB_USER:-storify_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-storify_password}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    networks:
      - storify-network
    # Remove external port exposure for production security
    # ports:
    #   - "5432:5432"

  # Next.js Application (Production)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: storify-app-prod
    restart: unless-stopped
    ports:
      - "${APP_PORT:-3000}:3000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - NEXT_PUBLIC_SOCKET_URL=${NEXT_PUBLIC_SOCKET_URL}
      - NODE_ENV=production
    depends_on:
      - db
    networks:
      - storify-network

  # Socket.io Server (Production)
  socket-server:
    build:
      context: ./server
      dockerfile: ../Dockerfile.server
    container_name: storify-socket-prod
    restart: unless-stopped
    ports:
      - "${SOCKET_PORT:-3001}:3001"
    environment:
      - FRONTEND_URL=${NEXTAUTH_URL}
      - PORT=3001
      - NODE_ENV=production
    networks:
      - storify-network

  # Redis for session storage (optional, uncomment if needed)
  # redis:
  #   image: redis:7-alpine
  #   container_name: storify-redis-prod
  #   restart: unless-stopped
  #   networks:
  #     - storify-network

volumes:
  postgres_prod_data:

networks:
  storify-network:
    driver: bridge
